/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as SearchRouteImport } from './routes/search'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as LoginRouteImport } from './routes/login'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ExperiencesCreateRouteImport } from './routes/experiences/create'
import { Route as UsersUserIdIndexRouteImport } from './routes/users/$userId/index'
import { Route as ExperiencesExperienceIdIndexRouteImport } from './routes/experiences/$experienceId/index'
import { Route as UsersUserIdFollowingRouteImport } from './routes/users/$userId/following'
import { Route as UsersUserIdFollowersRouteImport } from './routes/users/$userId/followers'
import { Route as ExperiencesExperienceIdEditRouteImport } from './routes/experiences/$experienceId/edit'
import { Route as ExperiencesExperienceIdAttendeesRouteImport } from './routes/experiences/$experienceId/attendees'

const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const SearchRoute = SearchRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRouteImport,
} as any)
const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ExperiencesCreateRoute = ExperiencesCreateRouteImport.update({
  id: '/experiences/create',
  path: '/experiences/create',
  getParentRoute: () => rootRouteImport,
} as any)
const UsersUserIdIndexRoute = UsersUserIdIndexRouteImport.update({
  id: '/users/$userId/',
  path: '/users/$userId/',
  getParentRoute: () => rootRouteImport,
} as any)
const ExperiencesExperienceIdIndexRoute =
  ExperiencesExperienceIdIndexRouteImport.update({
    id: '/experiences/$experienceId/',
    path: '/experiences/$experienceId/',
    getParentRoute: () => rootRouteImport,
  } as any)
const UsersUserIdFollowingRoute = UsersUserIdFollowingRouteImport.update({
  id: '/users/$userId/following',
  path: '/users/$userId/following',
  getParentRoute: () => rootRouteImport,
} as any)
const UsersUserIdFollowersRoute = UsersUserIdFollowersRouteImport.update({
  id: '/users/$userId/followers',
  path: '/users/$userId/followers',
  getParentRoute: () => rootRouteImport,
} as any)
const ExperiencesExperienceIdEditRoute =
  ExperiencesExperienceIdEditRouteImport.update({
    id: '/experiences/$experienceId/edit',
    path: '/experiences/$experienceId/edit',
    getParentRoute: () => rootRouteImport,
  } as any)
const ExperiencesExperienceIdAttendeesRoute =
  ExperiencesExperienceIdAttendeesRouteImport.update({
    id: '/experiences/$experienceId/attendees',
    path: '/experiences/$experienceId/attendees',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/search': typeof SearchRoute
  '/settings': typeof SettingsRoute
  '/experiences/create': typeof ExperiencesCreateRoute
  '/experiences/$experienceId/attendees': typeof ExperiencesExperienceIdAttendeesRoute
  '/experiences/$experienceId/edit': typeof ExperiencesExperienceIdEditRoute
  '/users/$userId/followers': typeof UsersUserIdFollowersRoute
  '/users/$userId/following': typeof UsersUserIdFollowingRoute
  '/experiences/$experienceId': typeof ExperiencesExperienceIdIndexRoute
  '/users/$userId': typeof UsersUserIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/search': typeof SearchRoute
  '/settings': typeof SettingsRoute
  '/experiences/create': typeof ExperiencesCreateRoute
  '/experiences/$experienceId/attendees': typeof ExperiencesExperienceIdAttendeesRoute
  '/experiences/$experienceId/edit': typeof ExperiencesExperienceIdEditRoute
  '/users/$userId/followers': typeof UsersUserIdFollowersRoute
  '/users/$userId/following': typeof UsersUserIdFollowingRoute
  '/experiences/$experienceId': typeof ExperiencesExperienceIdIndexRoute
  '/users/$userId': typeof UsersUserIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/search': typeof SearchRoute
  '/settings': typeof SettingsRoute
  '/experiences/create': typeof ExperiencesCreateRoute
  '/experiences/$experienceId/attendees': typeof ExperiencesExperienceIdAttendeesRoute
  '/experiences/$experienceId/edit': typeof ExperiencesExperienceIdEditRoute
  '/users/$userId/followers': typeof UsersUserIdFollowersRoute
  '/users/$userId/following': typeof UsersUserIdFollowingRoute
  '/experiences/$experienceId/': typeof ExperiencesExperienceIdIndexRoute
  '/users/$userId/': typeof UsersUserIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/register'
    | '/search'
    | '/settings'
    | '/experiences/create'
    | '/experiences/$experienceId/attendees'
    | '/experiences/$experienceId/edit'
    | '/users/$userId/followers'
    | '/users/$userId/following'
    | '/experiences/$experienceId'
    | '/users/$userId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/register'
    | '/search'
    | '/settings'
    | '/experiences/create'
    | '/experiences/$experienceId/attendees'
    | '/experiences/$experienceId/edit'
    | '/users/$userId/followers'
    | '/users/$userId/following'
    | '/experiences/$experienceId'
    | '/users/$userId'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/register'
    | '/search'
    | '/settings'
    | '/experiences/create'
    | '/experiences/$experienceId/attendees'
    | '/experiences/$experienceId/edit'
    | '/users/$userId/followers'
    | '/users/$userId/following'
    | '/experiences/$experienceId/'
    | '/users/$userId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
  SearchRoute: typeof SearchRoute
  SettingsRoute: typeof SettingsRoute
  ExperiencesCreateRoute: typeof ExperiencesCreateRoute
  ExperiencesExperienceIdAttendeesRoute: typeof ExperiencesExperienceIdAttendeesRoute
  ExperiencesExperienceIdEditRoute: typeof ExperiencesExperienceIdEditRoute
  UsersUserIdFollowersRoute: typeof UsersUserIdFollowersRoute
  UsersUserIdFollowingRoute: typeof UsersUserIdFollowingRoute
  ExperiencesExperienceIdIndexRoute: typeof ExperiencesExperienceIdIndexRoute
  UsersUserIdIndexRoute: typeof UsersUserIdIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/experiences/create': {
      id: '/experiences/create'
      path: '/experiences/create'
      fullPath: '/experiences/create'
      preLoaderRoute: typeof ExperiencesCreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users/$userId/': {
      id: '/users/$userId/'
      path: '/users/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof UsersUserIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/experiences/$experienceId/': {
      id: '/experiences/$experienceId/'
      path: '/experiences/$experienceId'
      fullPath: '/experiences/$experienceId'
      preLoaderRoute: typeof ExperiencesExperienceIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users/$userId/following': {
      id: '/users/$userId/following'
      path: '/users/$userId/following'
      fullPath: '/users/$userId/following'
      preLoaderRoute: typeof UsersUserIdFollowingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users/$userId/followers': {
      id: '/users/$userId/followers'
      path: '/users/$userId/followers'
      fullPath: '/users/$userId/followers'
      preLoaderRoute: typeof UsersUserIdFollowersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/experiences/$experienceId/edit': {
      id: '/experiences/$experienceId/edit'
      path: '/experiences/$experienceId/edit'
      fullPath: '/experiences/$experienceId/edit'
      preLoaderRoute: typeof ExperiencesExperienceIdEditRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/experiences/$experienceId/attendees': {
      id: '/experiences/$experienceId/attendees'
      path: '/experiences/$experienceId/attendees'
      fullPath: '/experiences/$experienceId/attendees'
      preLoaderRoute: typeof ExperiencesExperienceIdAttendeesRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  SearchRoute: SearchRoute,
  SettingsRoute: SettingsRoute,
  ExperiencesCreateRoute: ExperiencesCreateRoute,
  ExperiencesExperienceIdAttendeesRoute: ExperiencesExperienceIdAttendeesRoute,
  ExperiencesExperienceIdEditRoute: ExperiencesExperienceIdEditRoute,
  UsersUserIdFollowersRoute: UsersUserIdFollowersRoute,
  UsersUserIdFollowingRoute: UsersUserIdFollowingRoute,
  ExperiencesExperienceIdIndexRoute: ExperiencesExperienceIdIndexRoute,
  UsersUserIdIndexRoute: UsersUserIdIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
